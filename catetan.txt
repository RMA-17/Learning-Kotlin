Materi Sertifikasi Kotlin

1. Apa itu kotlin?

Pada tahun 2010 lalu JetBrains memulai sebuah proyek open-sources baru. Proyek ini merupakan sebuah bahasa pemrograman statically typed yang menargetkan JVM, Android, JavaScript dan Native. Kotlin -nama sebuah pulau di Rusia- menjadi inspirasi oleh tim pengembang untuk ditetapkan sebagai nama bahasa pemrograman tersebut. Mungkin karena pulau tersebut terletak tidak jauh dari markas tim programer JetBrains, yaitu Saint Petersburg, Rusia. Bahasa Kotlin pertama kali dirilis pada bulan Februari 2016 dengan versi 1.0. Saat ini sudah mencapai versi 1.5.21 per rilis 14 Juli 2021. 

Di balik kemajuan pesatnya Kotlin, terdapat pengembang - pengembang hebat dan kreatif dari JetBrains. Kotlin dikembangkan oleh lebih dari 50 developer pimpinan Andrey Breslav. Mereka semua terinspirasi dari bahasa pemrograman yang sudah ada seperti Java, Scala, JavaScript, C# dan juga Groovy. Apa yang membedakan? Salah satunya, JetBrains memastikan bahwa Kotlin sangat mudah dipelajari.

Kotlin dapat digunakan untuk berbagai macam pengembangan aplikasi, baik itu server atau backend, website, maupun mobile Android. Bahkan saat ini tengah dikembangkan Kotlin/Native. Apa uniknya? Kotlin/Native memungkinkan developer untuk menggunakannya sebagai bahasa pemrograman dalam pengembangan aplikasi di platform lain seperti embedded system, desktop, macOS, dan iOS. Bahkan tak menutup kemungkinan Kotlin juga bisa digunakan untuk data science dan machine learning. Menarik, bukan?

Dukungan tools untuk Kotlin , sangat kuat. Kita bisa dengan mudah menggunakan Kotlin pada IDE seperti IntelliJ IDEA, Android Studio, Eclipse, dan NetBeans. Anda pun bisa menggunakan perintah terminal untuk mengkompilasi dan menjalankan Kotlin. Begitu pula untuk build tools. Pada JVM kita bisa menggunakan Gradle, Maven, Ant, atau Kobalt. Tersedia juga beberapa build tools yang menargetkan JavaScript.

Sebagaimana dijelaskan, kita bisa menargetkan Kotlin ke beberapa target. Kotlin akan menghasilkan bytecode yang berbeda sesuai dengan targetnya. Ketika menargetkan JVM, Kotlin akan menghasilkan bytecode yang kompatibel dengan Java. Kemudian ketika menargetkan JavaScript, Kotlin akan melakukan transpile ke ES5.1 dan menghasilkan kode yang kompatibel dengan sistem sub-modul termasuk AMD dan CommonJS. Sedangkan untuk native, Kotlin akan menghasilkan kode yang spesifik dengan platformnya melalui LLVM.

Pada sub-modul ini kita akan mencoba mengenal Kotlin secara lebih mendalam. Harapannya, sebelum mempelajari komponen-komponen pada Kotlin secara spesifik, kita semua bisa memahami untuk apa saja Kotlin bisa digunakan, apa saja kelebihan dan kekurangannya, karakteristiknya, dan juga seperti apa ekosistem Kotlin di dunia pengembangan aplikasi.

Apa keunikan Kotlin? Salah satunya, Kotlin merupakan sebuah bahasa pemrograman yang bisa ditargetkan untuk berbagai macam platform (Multiplatform) dan juga memiliki beberapa paradigma (Multiparadigm). Oleh karena itu, kita perlu tahu apa maksud dari Multiplatform dan Multiparadigm tersebut.  Mari kita bahas satu per satu. 


MULTIPARADIGM

Mungkin sebagian dari kita masih asing dengan istilah multiparadigm di dunia programing. Programming paradigm adalah sebuah cara untuk mengklasifikasikan bahasa pemrograman berdasarkan fitur yang dimilikinya. Paradigma disini berkaitan dengan bagaimana kode dalam sebuah bahasa pemrograman diatur, seperti mengelompokkan kode atau memodifikasinya. Lebih tepatnya, seperti apa struktur kode bisa diterapkan pada bahasa pemrograman tersebut.

Terdapat beberapa paradigma yang umum dimiliki oleh sebuah bahasa pemrograman. Ketika kita ingin mengklasifikasikan bahasa pemrograman berdasarkan cara penulisan sintaksnya, object-oriented programming (OOP) dan functional programming (FP) merupakan 2 (dua) paradigma yang terkenal di kalangan developer. Dari sisi konstruksi, Kotlin sendiri mencakup keduanya. Anda bisa menggunakan gaya OOP maupun FP, bahkan mencampurnya saat menuliskan sintaks Kotlin. Dengan dukungan tinggi untuk fitur-fitur seperti higher-order function, function types, dan lambda, Kotlin adalah pilihan yang tepat untuk Anda mengeksplorasi functional programming. Hampir semua General Purpose Language sekarang sudah mendukung multiparadigm. Untuk lebih jelasnya, mari kita bahas satu per satu kedua paradigma tersebut.

OOP

Suatu bahasa pemrograman bisa diklasifikasikan ke dalam OOP jika data dan metode yang digunakan untuk memanipulasinya disimpan sebagai satu unit yang bisa disebut dengan objek. OOP memiliki fitur enkapsulasi yang sempurna. Lebih lanjut, satu-satunya cara yang bisa digunakan agar objek atau pengguna lain dapat mengakses suatu data adalah dengan metode objek. Dengan demikian, cara kerja suatu objek dapat diubah tanpa mempengaruhi kode lain yang menggunakan objek tersebut. 

Kotlin memberikan dukungan yang luas untuk mengembangkan program berorientasi objek. Di dalam OOP kita akan mengenal beberapa konsep seperti object, classes, properties, constructor, dll. Dengan OOP kita bisa memecahkan persoalan yang kompleks menjadi set yang lebih kecil dengan membuat objek. Objek tersebut memiliki 2 (dua) karakteristik utama, yaitu state (keadaan) dan behaviour (perilaku).

--

Kita akan membahas mengenai komponen-komponen OOP pada Kotlin secara lebih mendalam pada sub-modul tersendiri. Sebagai pembuka, mari kita perhatikan contoh berikut:

1. Sepeda motor adalah sebuah objek. Sepeda motor memiliki 2 (dua) roda yang mana bisa kita sebut sebagai states. Sepeda motor bisa melaju, bisa direm, bisa juga berganti gigi. Nah, ketiga hal tersebut bisa kita sebut sebagai behaviour.

2. Kuda adalah sebuah objek. Kuda memiliki nama, warna, dan juga jenis yang mana merupakan states dari Kuda. Kuda bisa berlari, makan, dan lain sebagainya. Inilah yang kita sebut sebagai behaviour.

Sebuah objek seperti sepeda motor juga bisa memiliki objek-objek kecil di dalamnya, misalnya roda, rem, body, mesin dll. Semuanya bisa saling berhubungan dan berinteraksi. Selain itu, OOP juga berdasar pada konsep Message Passing, yakni sebuah tipe komunikasi antara proses dan objek. Itulah gambaran sederhana konsep OOP yang akan kita pelajari.

FUNCTIONAL PROGRAMMING

Functional programming merupakan paradigma yang sedang hype di kalangan developer saat ini. Paradigma ini memperlakukan komputasi sebagai evaluasi fungsi matematika dan menghindari perubahan keadaan atau state dan data yang bisa berubah. Dalam FP, pemrograman dilakukan dengan expression atau declaration. Sehingga sebuah fungsi menghasilkan nilai yang hanya bergantung pada argumen yang diteruskan ke fungsi tersebut. Menghilangkan efek seperti perubahan state yang tidak tergantung pada fungsi input, dapat membuatnya lebih mudah untuk memahami dan memprediksi behaviour sebuah program. Inilah tujuan utama dari functional programming.

Masih banyak developer yang langsung membayangkan OOP ketika mendengar kata “Kotlin”. Padahal seperti yang telah disebutkan sebelumnya, Kotlin merupakan multiparadigm language. Kotlin memiliki beberapa fitur yang memiliki gaya functional programming, walaupun tidak sepenuhnya functional programming. Mengapa demikian? Sesungguhnya Kotlin adalah sebuah bahasa pemrograman berorientasi objek yang memiliki struktur fungsional. Ini artinya Kotlin juga merupakan sebuah functional programming language.

Functional programming juga bertujuan untuk mempermudah kita memahami sebuah kode. Ide dibalik FP adalah menambahkan dan mengurangi hal tertentu untuk membuat kode kita sedikit lebih mudah dipahami. Kotlin memiliki banyak fitur menarik yang membuatnya bisa disebut dengan functional programming seperti higher-order function, function types, extension functions, lambda, dll. Kita akan membahas kembali mengenai functional programming pada Kotlin dan fitur-fitur tersebut pada sub-modul tersendiri.

KOTLIN UNTUK APLIKASI ANDROID

Berbeda dengan aplikasi server-side, aplikasi mobile biasanya membutuhkan proses pengembangan yang lebih cepat. Selain itu, dengan begitu banyaknya tipe perangkat mobile, developer perlu memastikan bahwa aplikasinya dapat berjalan dengan baik pada semua perangkat. Dengan semua fitur yang Kotlin tawarkan, terpenuhilah semua kebutuhan pada pengembangan aplikasi mobile. Berikut ini adalah beberapa kelebihan mengembangkan aplikasi Android dengan Kotlin:

- Compatibility
Kotlin sepenuhnya kompatibel dengan JDK 6. Ini memastikan bahwa aplikasi yang dibangun dengan Kotlin dapat berjalan pada perangkat Android yang lebih lama tanpa ada masalah. Android Studio pun mendukung penuh pengembangan dengan bahasa Kotlin.

- Performance
Dengan struktur bytecode yang sama dengan Java, aplikasi yang dibangun dengan Kotlin dapat berjalan setara dengan aplikasi yang dibangun dengan Java. Terdapat juga fitur seperti inline function pada Kotlin yang membuat kode yang dituliskan dengan lambda bisa berjalan lebih cepat dibandingkan kode yang sama dan dituliskan dengan Java.

- Interoperability
Anda dapat menggunakan bahasa Kotlin bersamaan dengan bahasa Java, tanpa harus memigrasikan semua kode lama Anda ke Java. Sehingga Anda dapat memanggil kode Java dari Kotlin dan sebaliknya. Inilah alasan yang menyebabkan Kotlin menjadi cepat diterima oleh developer.

- Compilation Time
Kotlin mendukung kompilasi inkremental yang efisien. Oleh karena itu, proses build biasanya sama atau lebih cepat dibandingkan dengan Java.

Perkembangan Kotlin pada Android pun bisa dibilang sangat cepat. Bahkan pada acara Google I/O 2019 lalu, Google mengumumkan Kotlin First!, yaitu menetapkan Kotlin sebagai bahasa pemrograman nomor 1 (satu) untuk Android. Hampir semua update pada Android saat ini sudah menggunakan Kotlin pada dokumentasinya. Tim Android juga merilis Android Jetpack yang merupakan sekumpulan library yang dapat digunakan untuk memanfaatkan fitur bahasa Kotlin dengan lebih advanced. Semua dokumentasi juga disediakan dengan sangat jelas dan lengkap pada https://developer.android.com/kotlin/ atau https://kotlinlang.org/docs/reference/android-overview.html.


Salah satu alasan JetBrains mengembangkan Kotlin adalah karena mereka tak puas dengan Java dan ingin meningkatkan produktivitas mereka. Seorang Java developer yang sudah mempelajari Kotlin, pasti akan membenarkan pernyataan tersebut. Apa pasal? Karena memang benar Java punya kekurangan pada beberapa aspek. Lalu seberapa besar pengaruh Kotlin dalam produktivitas seorang developer?

Produktivitas memang menjadi salah satu faktor penting yang menjadi alasan mengapa seorang developer harus mempelajari sebuah bahasa pemrograman. Kotlin memiliki beberapa kelebihan yang dapat meningkatkan produktivitas developer. Berikut beberapa kelebihan tersebut:

- Ringkas (Concise)
Selain mudah dipelajari, bahasa pemrograman baru yang satu ini juga mudah untuk dituliskan. Sintaksisnya pun mudah dibaca dan bisa dibilang lebih “manusiawi.” Mungkin karena penamaan fungsi di dalamnya yang mirip dengan bahasa manusia sehari-hari. Kotlin memungkinkan kita untuk mengurangi jumlah penulisan kode boilerplate. Maka jangan heran jika kita sering mendengar istilah “nicer Java”.

- Dapat dioperasikan secara bersilangan (Interoperable)
Apakah Anda seorang Java developer yang ingin berpindah ke Kotlin? Jangan khawatir, Kotlin dan Java sama-sama berjalan di atas JVM. Alhasil, keduanya bisa dijalankan bersamaan dalam 1 (satu) proyek. Tentunya ini sangat menguntungkan. Kita tidak perlu menuliskan ulang kode Java yang sudah ada. Anda cukup menuliskan kode baru dengan Kotlin. Menariknya, selain bisa dijalankan bersamaan, fungsi yang ada pada kedua bahasa tersebut juga bisa saling diakses. Java bisa mengakses fungsi yang ada pada Kotlin. Sebaliknya, Kotlin juga bisa mengakses fungsi yang ada pada Java.

- Dukungan tools yang memadai (Tool-friendly)

Membahas soal produktivitas, tentu tak jauh dari dukungan tools yang diberikan. Saat ini banyak IDE yang mendukung Kotlin. Tersedia juga https://play.kotlinlang.org/ yang memungkinkan Anda mencoba Kotlin secara online. Kita pun tetap bisa menggunakan command line atau terminal. Kita akan mempelajari tentang IDE dan tools lainnya pada modul terpisah.


KARAKTERISTIK KOTLIN

Modern and Concise
Kotlin dikenal dengan bahasa modern yang ringkas untuk dituliskan. Kotlin mampu memangkas berbaris-baris kode menjadi hanya beberapa baris saja. Seperti kita ketahui, programmer menghabiskan banyak waktunya untuk membaca dan menuliskan kode. Ketika kita sedang mengembangkan sebuah aplikasi, hal yang pertama kita lakukan pastinya adalah membaca kode. Baik kode dari sebuah dokumentasi atau pun kode yang sudah ada pada proyek yang sedang dikerjakan. Membaca atau menuliskan kode yang ringkas dan mudah dipahami tentunya menjadi sebuah keuntungan sendiri bagi seorang programmer.

Semakin ringkas sebuah kode, maka semakin cepat pula untuk kita pahami. Selain ringkas, faktor lain seperti penamaan fungsi juga akan sangat berpengaruh. Kotlin memiliki fungsi-fungsi bawaan yang namanya mudah diingat. Bahkan pilihan keyword yang terkesan sangat sederhana. Mari kita perhatikan perbandingan antara Kotlin dan Java berikut:

JAVA:
public class SomeClasses{
    public static void main(String[] args){
        System.out.println("Hello");
    }
}
KOTLIN:
class SomeClasses{
    fun main(){
        println("Hello")
    }
}

Hal apa yang pertama kali Anda lihat ketika melihat 2 (dua) kode di atas?”.

“Kotlin tidak memerlukan semicolon atau tanda titik koma (;)”.

Ya benar, itu adalah salah satu ciri dari Kotlin. Sederhana, tapi tak jarang programmer dibuat pusing karena lupa menambahkan semicolon di akhir kode ketika ngoding dengan Java. Kode di atas memiliki kegunaan yang sama namun dituliskan dengan bahasa pemrograman yang berbeda. Terlihat dengan sangat jelas bahwa kode yang dituliskan dengan Kotlin lebih ringkas dan lebih mudah dipahami, bukan? Nah, itu belum seberapa. Pada akademi ini Anda akan melihat banyak contoh kode yang menunjukan bahwa Kotlin adalah bahasa yang sangat ringkas.

Kotlin juga dibekali dengan beberapa standard library seperti higher-order function, extension function, dll yang membuat penulisan kodenya semakin ringkas. Semuanya akan kita pelajari satu per satu pada akademi ini.

Pragmatic
Sebuah bahasa pemrograman bisa dikatakan pragmatis jika mampu mengatasi masalah dengan praktis. Kotlin dikembangkan berdasarkan permasalahan-permasalahan yang sering dialami oleh programmer di JetBrains. Tanpa mengesampingkan saran dan feedback dari komunitas, dalam setiap rilisnya Kotlin selalu memperbarui fitur-fitur yang ada demi solusi praktis bagi programmer.

Selain ringkas ditulis, hal lain yang membuat Kotlin bisa dikatakan pragmatis adalah dukungan tools yang sangat membantu proses penulisan kode. JetBrains menambahkan dukungan Kotlin pada IntelliJ IDEA beserta plugin-plugin yang disesuaikan dengan setiap fitur yang ada pada Kotlin.

Plugin yang ada pun mampu menuntun programmer untuk mempelajari fitur-fitur pada Kotlin. Sebagai contoh, kita bisa mengkonversi kode Java menjadi Kotlin secara otomatis hanya dengan melakukan copy-paste kode saja pada berkas Kotlin. Dengan begitu, secara tidak langsung kita bisa belajar seperti apakah jika sebuah kode pada Java dituliskan dengan Kotlin. Contoh lain, IntelliJ IDEA mampu menampilkan peringatan pada sebuah kode yang penulisannya kurang tepat. Tak hanya itu, setiap peringatan selalu disertai dengan saran perbaikan. Tentunya kita akan belajar bagaimana seharusnya sebuah kode dituliskan pada Kotlin.

Kotlin mampu memeriksa kesalahan pada saat kompilasi, sehingga memungkinkan kita untuk mencegah kesalahan tersebut. Yang paling hebat, Kotlin menghilangkan NullPointerException yang sering disebut sebagai “The billion dollar mistake” oleh programer Java. Kotlin membedakan antara objek yang boleh null atau tidak boleh null pada saat objek itu dibuat. Tentunya juga menyediakan beberapa solusi untuk penulisannya. Fitur tersebut dikenal dengan Null Safety. Sebagai contoh, kode berikut:

``
var a : String = "Kotlin"
a = null //kompilasi error
``

Secara default, Kotlin mengasumsikan nilai dari sebuah properti tidak boleh null. Oleh karena itu, kode pada baris kedua akan langsung dianggap eror. Namun seringkali kita tidak bisa menghindari bahwa sebuah data ternyata null, apalagi ketika kita mengkonsumsi data yang didapatkan dari server. Kita pun bisa menetapkan sebuah properti nullable dengan menambahkan tanda (?) pada tipe datanya. 

``
var a : String? = "Kotlin"
a = null
``

- Properti a sekarang bisa ditetapkan sebagai nullable, dan untuk mengaksesnya kita perlu menerapkan sebuah mekanisme untuk menghindari kesalahan kompilasi. Terdapat beberapa cara yang bisa dilakukan. Semuanya akan dibahas pada sub-modul terpisah.

- Free and Open-Sources
Bagi pegiat open-sources dan developer pada umumnya, hal ini tentunya sangat menguntungkan. Kompiler, library, tools, dan terutama Kotlin itu sendiri bebas untuk diakses gratis. Seperti yang sudah disebutkan di awal akademi, Kotlin mempunyai lisensi Apache 2.0. Anda pun bisa memantau atau berkontribusi untuk pengembangan Kotlin pada repo-nya di https://github.com/jetbrains/kotlin. Beberapa IDE yang bisa Anda gunakan seperti IntelliJ IDEA, Android Studio dan Eclipse juga termasuk ke dalam open-sources software.

- Saat ini sudah terdapat ratusan developer yang berkontribusi dengan ribuan commit-nya pada pengembangan Kotlin. Jika Anda tertarik untuk berkontribusi, tersedia juga panduan yang lengkap pada tautan ini. Semakin banyak kontribusi dari developer-developer hebat, tentunya Kotlin akan menjadi kian powerful.

- Ekosistem Kotlin
Berbicara mengenai ekosistem, di Indonesia sendiri Kotlin mulai ramai digunakan sejak tahun 2017. Pada tahun itu juga Kotlin ditetapkan sebagai bahasa pemrograman resmi pada salah satu platform yang juga sangat terkenal, yaitu Android. Walaupun sebenarnya sebelum tahun 2017 juga ada developer yang sudah mulai menuliskan kodenya dengan Kotlin.


- Rangkuman dari Pendahuluan
Kotlin merupakan bahasa pemrograman open-source yang mudah dipelajari oleh siapapun. Ini bisa dilakukan berkat kejeniusan para developer di JetBrains yang dipimpin langsung oleh Andrey Breslav. Selain mudah dipelajari, Kotlin memungkinkan kita untuk membuat program antar platform yang tentunya ini dapat mengurangi biaya dalam pembuatan program itu sendiri. 

Selain itu dalam sub-modul pendahuluan ini Anda juga telah mengetahui beberapa hal sebagai berikut:

Selain mudah dipelajari, Anda juga dapat ikut berkontribusi di dalamnya karena Kotlin merupakan project open-source.

Kotlin mendukung 2 paradigma (multiparadigm) umum yang akan Anda sering jumpai, yaitu Object-Oriented Programming (OOP) dan Functional Programming (FP). Kedua paradigma tersebut akan sangat membantu proses pengembangan dengan masing-masing fitur yang dimilikinya.

Selain multiparadigm, Kotlin juga mendukung multiplatform yang berbeda dengan bahasa pemrograman mainstream lainnya di mana kita dapat membuat aplikasi mobile (iOS/Android), Web, Desktop, atau Server. Bahkan Kotlin digadang-gadang bisa digunakan untuk Deep Learning dengan KotlinDL yang saat ini sudah berstatus alpha!

Terdapat 3 bagian pada Kotlin Multiplatform, yaitu:

Common Module
Modul ini berisi kode yang tidak spesifik ke platform apa pun. Kita bisa menempatkan komponen-komponen yang bisa digunakan oleh semua modul pada modul ini.

Platform Module
Pada modul ini kita bisa menambahkan komponen tertentu yang spesifik untuk satu platform. Biasanya modul ini merupakan implementasi dari common module. 

Regular Module
Merupakan modul umum yang menargetkan  platform tertentu. Modul ini bisa dependen atau pun menjadi dependensi dari platform module.

Kotlin mendukung dengan baik dan memiliki beberapa kelebihan dalam mengembangkan aplikasi Android seperti di bawah ini:

Compatibility
Kotlin sepenuhnya kompatibel dengan JDK 6. Ini memastikan bahwa aplikasi yang dibangun dengan Kotlin dapat berjalan pada perangkat Android yang lebih lama tanpa ada masalah. Android Studio pun mendukung penuh pengembangan dengan bahasa Kotlin.


Performance
Dengan struktur bytecode yang sama dengan Java, aplikasi yang dibangun dengan Kotlin dapat berjalan setara dengan aplikasi yang dibangun dengan Java. Terdapat juga fitur seperti inline function pada Kotlin yang membuat kode yang dituliskan dengan lambda bisa berjalan lebih cepat dibandingkan kode yang sama dan dituliskan dengan Java.


Interoperability
Anda dapat menggunakan bahasa Kotlin bersamaan dengan bahasa Java, tanpa harus memigrasikan semua kode lama Anda ke Java. Sehingga Anda dapat memanggil kode Java dari Kotlin dan sebaliknya. Inilah alasan yang menyebabkan Kotlin menjadi cepat diterima oleh developer.

Compilation Time
Kotlin mendukung kompilasi inkremental yang efisien. Oleh karena itu, proses build biasanya sama atau lebih cepat dibandingkan dengan Java.

Perkembangan Kotlin pada Android pun bisa dibilang sangat cepat. Bahkan pada acara Google I/O 2019 lalu, Google mengumumkan Kotlin First!, yaitu menetapkan Kotlin sebagai bahasa pemrograman nomor 1 (satu) untuk Android. Hampir semua update pada Android saat ini sudah menggunakan Kotlin pada dokumentasinya.

Berikut ini adalah beberapa karakteristik dari bahasa Kotlin

Modern and Concise
Kotlin dikenal dengan bahasa modern yang ringkas untuk dituliskan. Kotlin mampu memangkas berbaris-baris kode menjadi hanya beberapa baris saja. 

Pragmatic
Sebuah bahasa pemrograman bisa dikatakan pragmatis jika mampu mengatasi masalah dengan praktis.

Safe
Anda bisa meminimalisir kesalahan yang sering terjadi ketika menggunakan Java, yaitu NullPointerException.

Statically Typed
Artinya setiap ekspresi di dalam sebuah program dapat dikenali pada saat kompilasi.

Open source
Anda juga dapat ikut berkontribusi di dalam pengembangan bahasa Kotlin.

Kotlin pernah berada di posisi pertama dalam Fastest growing languages versi GitHub Octoverse 2018 berkat banyaknya dukungan komunitas dalam pengembangannya.

Rangkuman dari Persiapan Membangun dan Menjalankan Program Kotlin
Kita sudah selesai dengan persiapan membangun dan menjalankan program dengan Kotlin. Untuk me-refresh kembali apa yang sudah dipelajari, berikut adalah rangkumannya:

Kotlin menggunakan Java Development Kit (JDK) sebagai SDK-nya.

Terdapat banyak distribusi JDK yang bisa Anda gunakan seperti OracleJDK, OpenJDK atau Azul Zulu JDK.

Kotlin berjalan di atas dan mengunakan JVM untuk menjalankan program yang Anda sudah kembangkan.

Untuk melakukan otomatisasi seperti proses kompilasi, Anda akan menggunakan Gradle sebagai build script dalam pengembangan program.

Anda bisa menggunakan Groovy atau Kotlin DSL sebagai gradle build script.

Dalam proses instalasi JDK dan Gradle di Linux dan macOS, Anda akan memanfaatkan SDK Manager yang bernama SDKMAN.

Sedangkan pada OS Windows, menggunakan installer yang sudah disediakan Azul Zulu JDK.

Dalam menuliskan kode program, Anda bisa memanfaatkan IDE yang dikembangkan oleh JetBrains, yaitu Intellij IDEA yang terbagi atas 2 (dua) versi. Yang pertama versi Ultimate dan Community yang dapat digunakan secara gratis.

Untuk membuat projek Kotlin, bisa dilakukan dengan 2 (dua) cara yaitu melalui terminal atau langsung menggunakan IntelliJ IDEA dengan project wizard-nya.

Setelah melakukan persiapan, sudah siap menuliskan kode Kotlin? Yuk kita lanjut ke sub-modul berikutnya.

Int (32 Bit)
Int adalah tipe data yang umumnya digunakan untuk menyimpan nilai numerik. Int dapat menyimpan data dari range -2^31 sampai +2^31-1. Dengan ukuran 32 Bit kita bisa menggunakannya untuk menyimpan nilai yang besar. Catatannya, tetap lihatlah batasan nilai maksimal yang dapat dimasukkan.

val intNumber = 100
Long (64 Bit)
Long adalah tipe data yang digunakan untuk menyimpan nilai numerik yang lebih besar yaitu dari range -2^63 sampai +2^63-1. Long bisa didefinisikan secara eksplisit:

val longNumber: Long = 100
Atau dengan menambahkan suffix L seperti berikut:

val longNumber = 100L
Short (16 Bit)
Short merupakan sebuah bilangan bulat yang hanya dapat menyimpan nilai yang kecil karena hanya berukuran 16 Bit.

val shortNumber: Short = 10
Byte (8 Bit)
Dengan ukuran yang kecil, Byte hanya mampu menyimpan nilai yang kecil sama halnya seperti Short. Byte biasa digunakan untuk keperluan proses membaca dan menulis data dari sebuah stream file atau jaringan.

val byteNumber = 0b11010010
Double (64 Bit)
Sama halnya dengan Long yang memiliki ukuran yang besar, Double mampu menyimpan nilai numerik yang besar pula. Pada umumnya Double digunakan untuk menyimpan nilai numerik pecahan sampai dengan maksimal 15-16 angka di belakang koma.

val doubleNumber: Double = 1.3
Float (32 Bit)
Sama seperti Double, namun memiliki ukuran yang lebih kecil, yakni hanya sampai 6-7 angka di belakang koma.

val floatNumber: Float = 0.123456789f //yang terbaca hanya 0.1234567

Untuk mengetahui nilai maksimal yang dapat disimpan oleh suatu tipe Number, kita bisa menggunakan properti MAX_VALUE.  Sementara untuk mengetahui nilai minimal yang dapat disimpan, gunakan properti MIN_VALUE.   

fun main() {
    val maxInt = Int.MAX_VALUE
    val minInt = Int.MIN_VALUE
 
    println(maxInt)
    println(minInt)
 
    /*
     output :
            2147483647
            -2147483648
     */
}

Jika kita memasukan nilai melebihi nilai maksimal yang dapat disimpan, maka akan terjadi overflow. Nilai yang akan dikembalikan adalah nilai minimal yang dapat disimpan.

fun main() {
    val maxInt = Int.MAX_VALUE
    val overRangeInt = Int.MAX_VALUE + 1 // This operation has led to an overflow
 
    println("Max Int: $maxInt")
    println("Over range Int: $overRangeInt")
}
 
/*
Output :
 
Max Int: 2147483647
Over range Int: -2147483648
*/


berikut adalah beberapa rangkuman dari sub-modul yang sudah dipelajari:

Sama seperti bahasa pemrograman lain, Kotlin memiliki fungsi untuk mencetak nilai pada console yaitu fungsi print() dan println().
Untuk mendeklarasi variable, Anda akan menggunakan kata kunci var atau val. var atau val digunakan untuk mengontrol nilai dari sebuah variabel. Dengan kata kunci var kita bisa mengubah nilai yang sudah kita inisialisasikan.
Untuk membuat variable yang menampung data berupa text, Anda dapat menggunakan tipe data Char untuk menyimpan satu karakter dan tipe data String untuk menyimpan beberapa karakter.
Sedangkan untuk menampung data berupa number, Anda akan menggunakan beberapa tipe data di bawah ini:
Int (32 Bit)
Int adalah tipe data yang umumnya digunakan untuk menyimpan nilai numerik. Int dapat menyimpan data dari range -2^31 sampai +2^31-1. Dengan ukuran 32 Bit kita bisa menggunakannya untuk menyimpan nilai yang besar. Catatannya, tetap lihatlah batasan nilai maksimal yang dapat dimasukkan.

Long (64 Bit)
Long adalah tipe data yang digunakan untuk menyimpan nilai numerik yang lebih besar yaitu dari range -2^63 sampai +2^63-1.

Short (16 Bit)
Short merupakan sebuah bilangan bulat yang hanya dapat menyimpan nilai yang kecil karena hanya berukuran 16 Bit.

Byte (8 Bit)
Dengan ukuran yang kecil, Byte hanya mampu menyimpan nilai yang kecil sama halnya seperti Short. Byte biasa digunakan untuk keperluan proses membaca dan menulis data dari sebuah stream file atau jaringan.

Double (64 Bit)
Sama halnya dengan Long yang memiliki ukuran yang besar, Double mampu menyimpan nilai numerik yang besar pula. Pada umumnya Double digunakan untuk menyimpan nilai numerik pecahan.

Float (32 Bit)
Sama seperti Double, namun memiliki ukuran yang lebih kecil, yakni hanya sampai 6-7 angka di belakang koma.

Selanjutnya adalah Array, yakni tipe data yang memungkinkan Anda untuk menyimpan beberapa objek di dalam satu variabel.
Kotlin juga memungkinkan Anda untuk membuat Array dengan tipe data primitif dengan memanfaatkan beberapa fungsi spesifik seperti berikut:
intArrayOf() : IntArray

booleanArrayOf() : BooleanArray

charArrayOf() : CharArray

longArrayOf() : LongArray

shortArrayOf() : ShortArray

byteArrayOf() : ByteArray

Kotlin mendukung juga tipe data Boolean di mana tipe data yang hanya memiliki dua nilai, yaitu true dan false. Selain itu, Terdapat 3 (tiga) operator yang dapat digunakan pada Boolean:
Conjunction atau AND (&&)
Operator AND (&&) akan mengembalikan nilai true jika semua hasil evaluasi expression yang diberikan bernilai true.

Disjunction atau OR (||)
Berbeda dengan operator AND (&&), operator OR (||) akan mengembalikan nilai true jika hasil evaluasi dari salah satu expressions yang diberikan bernilai true.

Negation atau NOT (!)
Berbeda dengan operator AND (&&) dan operator OR(||), operator NOT(!) digunakan untuk melakukan negasi pada hasil evaluasi expression yang diberikan.

Jika ingin menginisialisasi nilai dari sebuah variabel berdasarkan suatu kondisi. Untuk menyelesaikannya, gunakan If Expression.
Dengan Kotlin kita mudah dalam mengelola variable nullable sehingga dapat meminimalisir terjadinya NullPointerException dengan menggunakan Safe Call dan Elvis Operator.
Function atau fungsi merupakan sebuah prosedur yang memiliki keterkaitan dengan pesan dan objek. Ketika kita memanggil sebuah fungsi maka sebuah mini-program akan dijalankan. Fungsi sendiri bisa diartikan sebagai cara sederhana untuk mengatur program buatan kita.

Rangkuman dari Control Flow
Sudah bisa menentukan alur program yang akan dikembangkan? Yuk kita ulas lagi apa yang sudah kita pelajari pada sub-modul Control Flow:

Untuk menghindari penggunaan konstan yang keliru, kita bisa memanfaatkan fitur Enumeration untuk menyimpan kumpulan objek yang telah didefinisikan menjadi tipe data konstanta.

Jika memiliki beberapa ekspresi untuk menentukan hasil evaluasi, Anda bisa menggunakan when expression. Karena sebuah expression, when dapat mengembalikan nilai yang dapat ditampung pada sebuah variabel.

Sama seperti when, if expression dapat mengembalikkan nilai yang dapat ditampung pada sebuah variabel. Namun sedikit berbeda dengan when, if lebih cocok digunakan jika ekspresi yang akan digunakan untuk dievaluasi hanya 1 (satu).

Dalam mempelajari bahasa pemgrograman, Anda akan sering menjumpai istilah expressions dan statement. 

Jika ingin melakukan perulangan, ada beberapa cara yang dapat diterapkan yaitu:

While
While bersifat Entry Controlled Loop. Artinya, kondisi yang diberikan akan dievaluasi terlebih dahulu. Jika kondisi tersebut terpenuhi maka proses perulangan akan dijalankan.

Do While
Do While bersifat Exit Controlled Loop di mana proses perulangan akan langsung dijalankan di awal. Jika telah selesai, barulah kondisi yang diberikan akan dievaluasi.

For Loop
For merupakan konsep perulangan pada blok yang sama selama hasil evaluasi kondisi yang diberikan terpenuhi atau bernilai true. For memanfaatkan tipe data Range untuk menentukan kondisi yang akan dievaluasi.

Saat menggunakan While dan Do While perhatikan infinite loop, yaitu kondisi di mana proses perulangan berlangsung terus menerus sampai aplikasi menjadi crash.

Saat menerapkan perulangan, kita bisa memanfaatkan kata kunci break dan continue. Kedua kata kunci tersebut digunakan untuk menentukan proses perulangan akan seperti apa di mana break digunakan untuk menghentikan proses perulangan walaupun hasil evaluasi masih menghasil true dan continue digunakan untuk melanjutkan proses perulangan selanjutnya.

DATA CLASS

Kotlin mengenalkan konsep data class yang merupakan sebuah kelas sederhana yang bisa berperan sebagai data container. Data class adalah sebuah kelas yang tidak memiliki logika apapun dan juga tidak memiliki fungsionalitas lain selain menangani data.

Kenapa disebut dengan kelas sederhana? Seperti yang sudah kita ketahui, Kotlin memungkinkan kita untuk menulis kode dengan ringkas dan lebih efisien. Dalam membuat sebuah data class, kita tidak perlu menuliskan banyak kode yang seharusnya dibutuhkan untuk mengelola sebuah data. Data class mampu menyediakan beberapa fungsionalitas yang biasanya kita butuhkan untuk mengelola data hanya dengan sebuah keyword data.


Collections
Setelah berkenalan dan mempelajari data class, selanjutnya kita akan mencoba untuk mempelajari collection. Bayangkan ketika kita ingin menyimpan dan memanipulasi sebuah objek. Kita perlu sebuah komponen yang mampu menambahkan, menghapus, mencari, bahkan mengurutkan sebuah data. Semua tugas itu bisa kita lakukan dengan bantuan collection. Collections sendiri merupakan sebuah objek yang bisa menyimpan kumpulan objek lain termasuk data class. Dengan collection kita bisa menyimpan banyak data sekaligus. Di dalam collections terdapat beberapa objek turunan, di antaranya adalah List, Set, dan Map.


List
Yang pertama adalah List. Dengan List kita dapat menyimpan banyak data menjadi satu objek. Sebagai contoh, kita bisa membuat sebuah List yang berisi sekumpulan data angka, karakter atau yang lainnya. Yang menarik, sebuah List tidak hanya bisa menyimpan data dengan tipe yang sama. Namun juga bisa berisi bermacam - macam tipe data seperti Int, String, Boolean atau yang lainnya. 



Set
Set merupakan sebuah collection yang hanya dapat menyimpan nilai yang unik. Ini akan berguna ketika Anda menginginkan tidak ada data yang sama atau duplikasi dalam sebuah collection. Kita bisa mendeklarasikan sebuah Set dengan fungsi setOf.

Map
Turunan yang ketiga adalah Map, yakni sebuah collection yang dapat menyimpan data dengan format key-value (Seperti JSON).

Collections Operations
Selain memiliki beberapa turunan yang baru saja kita bahas, Collection juga mempunyai beberapa fungsi operasi yang bisa kita gunakan untuk mengakses data di dalamnya. Sekarang saatnya kita akan mempelajari fungsi-fungsi yang dimaksud.

Sequences
Tiga (3) jenis collection yang sudah kita pelajari sebelumnya merupakan jenis collection yang menjalankan eager evaluation. Berbeda dengan itu, Sequence merupakan collection yang bisa dikategorikan ke dalam lazy evaluation. Jika eager evaluation mengevaluasi seluruh item yang ada pada collection [5], lazy evaluation hanya akan mengevaluasi  item jika benar-benar diperlukan [6]. Kita ambil contoh.. Misalnya Anda mempunyai collection dengan jumlah data 10 atau 100 , itu mungkin tidak akan memberi pengaruh besar terhadap performa program. Namun apa yang terjadi jika data yang ada pada collection mencapai ratusan ribu atau jutaan? Waktu proses pada sebuah program akan bertambah signifikan jika semua datanya harus dievaluasi. 


Yosh! Anda sudah selesai dengan materi beberapa tipe Classes dan Collections. Sekarang kita akan merangkum apa saja yang sudah Anda pelajari.

Data class merupakan sebuah kelas sederhana yang bisa berperan sebagai data container.
Data class adalah kelas yang bisa disebut spesial karena kita tidak perlu menentukkan nilai dari fungsi toString(), equals(), dan hashCode() ketika digunakan.
Data class juga menyediakan fungsi copy() yang memudahkan kita untuk menyalin instance dari data class yang sudah dibuat.
Collections merupakan sebuah objek yang bisa menyimpan kumpulan objek lain termasuk data class. Berikut adalah beberapa jenis Collections yang sudah dipelajari:
List
Dengan List kita dapat menyimpan banyak data menjadi satu objek. Sebagai contoh, kita bisa membuat sebuah List yang berisi sekumpulan data angka, karakter atau yang lainnya.

Set
Set merupakan sebuah collection yang hanya dapat menyimpan nilai yang unik. Ini akan berguna ketika Anda menginginkan tidak ada data yang sama atau duplikasi dalam sebuah collection. Kita bisa mendeklarasikan sebuah Set dengan fungsi setOf.

Map
Map, yakni sebuah collection yang dapat menyimpan data dengan format key-value.

Sequences
Sequence merupakan collection yang bisa dikategorikan ke dalam lazy evaluation. Jika eager evaluation mengevaluasi seluruh item yang ada pada collection, lazy evaluation hanya akan mengevaluasi item jika benar-benar diperlukan.

Collection juga mempunyai beberapa fungsi operasi yang bisa kita gunakan untuk mengakses data di dalamnya dengan cara yang mudah, beberapa diantaranya adalah:
filter() dan filterNot()
Kedua fungsi tersebut akan menghasilkan list baru dari seleksi berdasarkan kondisi yang kita berikan. Sesuai dengan namanya, untuk memfilter atau menyaring suatu data dalam sebuah collection.

map()
Fungsi ini akan membuat collection baru sesuai perubahan yang akan kita lakukan dari collection sebelumnya.

count()
Fungsi count() dapat kita gunakan untuk menghitung jumlah item yang ada di dalam collection.

find(), firstOrNull(), & lastOrNull()
Selanjutnya adalah fungsi yang digunakan untuk mencari item pada sebuah collection. Untuk mencari item pertama yang sesuai dengan kondisi yang kita tentukan, kita bisa menggunakan fungsi find().

first() & last()
Hampir sama seperti fungsi firstOrNull() dan lastOrNull(), fungsi first() dan last() digunakan untuk menyaring item pertama atau terakhir dari sebuah collection. Kita juga bisa menambahkan sebuah kondisi dengan parameter lambda.

sum()
Mungkin Anda sudah tahu fungsi ini. Fungsi sum() khusus hanya bisa digunakan untuk collection yang bertipe angka. Fungsi ini akan menjumlahkan setiap data yang ada pada collection.

sorted()
sorted() digunakan untuk mengurutkan item yang ada di dalam collection. Secara default fungsi sorted() ini akan mengurutkan data secara ascending.

Functional Programming
Seperti yang sudah disampaikan di awal akademi. Kotlin adalah sebuah multiparadigm programming language. Artinya selain merupakan bahasa pemrograman berorientasi objek, dalam penulisan sintaksnya Kotlin menggunakan gaya functional programming.

Untuk mengawalinya, perhatikan kode berikut:

val list = getListUser()
 
fun getUsername(): List<String>{
    val name = mutableListOf<String>()
    for (user in list){
        name.add(user.name)
    }
    return name
}
Kode di atas biasanya kita tuliskan untuk mendapatkan nilai tertentu dari sebuah list. Karena kode pada Kotlin bisa dituliskan dengan gaya fungsional, maka kode di atas cukup dituliskan seperti berikut:

fun getUsername(): List<String>{
    return list.map {
        it.name
    }
}

Itu adalah salah satu contoh kenapa Kotlin termasuk ke dalam functional programming. Untuk lebih memahaminya, kita akan belajar tentang fitur atau komponen pada Kotlin yang terkait dengan functional programming. Anda akan mempelajari lebih detail tentang anatomi dari sebuah fungsi pada Kotlin, bagaimana fungsi Kotlin berperilaku, lambda, higher-order function dan konsep fungsional lainnya.


